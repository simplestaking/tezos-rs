##############################################################################################################
# Ocaml stuff is based on image tezos/tezos:v8 (if released new one, fell free to upgrade it here)
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://<testnet>.xtz-shots.io/tezos-<testnet>-<some-level>.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network granadanet --data-dir /tmp/chain-data
#     ./tezos-node run --network granadanet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BKyjtcb7VhJfTcqXWjf3p1beRmLVvMQsy5NvRJkPaVUkc6kx4e1 granadanet.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network granadanet --data-dir /tmp/granadanet
#   ./tezos-node snapshot import granadanet.20000.full --data-dir /tmp/granadanet  --reconstruct --network granadanet --history-mode full
#   cd /tmp/granadanet
#   tar -czvf granadanet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server (see synchronize_ci.sh -> CI_HOSTS)
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.66:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.67:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.68:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.69:/usr/local/etc/tezedge-ci/snapshots
#   scp granadanet.20000.snapshoted.tar.gz dev@65.21.119.70:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
#   tar -xzvf granadanet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
##############################################################################################################

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build

workspace:
  path: /drone/src

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files

steps:

- name: build-artifacts
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: always
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
    - name: ids
      path: /home/appuser/.ssh
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    - mkdir $${BUILD_ARTIFACTS_PATH}
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files/tezedge
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files/identities
    - mkdir -p $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - mkdir $${TEST_ARTIFACTS_PATH}/tests
    - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/sandbox $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client $${BUILD_ARTIFACTS_PATH}/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/009-florence-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/010-granada-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_009_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_010_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json $${SANDBOX_ARTIFACTS_PATH}
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh
    - cp ./light_node/etc/drone/assert_cyclic_test_result.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_cyclic_test_result.sh
    - cp ./light_node/etc/drone/identities/* $${BUILD_ARTIFACTS_PATH}/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config $${BUILD_ARTIFACTS_PATH}/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test
    - cp `find ./target/release/deps/ | grep chain_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test
    - cp `find ./target/release/deps/ | grep protocol_runner_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test
    - cp `find ./target/release/deps/ | grep p2p_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/p2p_test
    # copy test resources
    - cp ./shell/tests/resources/apply_block_request_until_1326.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_1_level3.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_2_level4.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox-patch-context.json $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    # collect modified python tests stuff
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/daemons
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/launchers
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py
    # Modify permissions for ssh key
    - chown appuser /home/appuser/.ssh/id_rsa
    - chown appuser /home/appuser/.ssh
    - chmod 600 /home/appuser/.ssh/id_rsa
    - ls -la /home/appuser/.ssh
    # copy build files to all other runner machines
    - echo "runner = $${DRONE_RUNNER_IP_ADDRESS}"
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${BUILD_ARTIFACTS_PATH} /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER} /home/appuser/.ssh
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${BUILD_ARTIFACTS_PATH}/build_files /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}/build_files /home/appuser/.ssh
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${TEST_ARTIFACTS_PATH} /usr/local/etc/tezedge-ci/tests/build_${DRONE_BUILD_NUMBER} /home/appuser/.ssh

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: ids
    host:
      path: /usr/local/etc/tezedge-ci/id

trigger:
  branch:
    - master
    - develop

---
kind: pipeline
name: verify-real-time-environment

clone:
  disable: true

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}

steps:

- name: generate-artificial-load
  image: simplestakingcom/tezedge-ci-builder:latest
  privileged: true
  detach: true
  user: root
  commands:
    - taskset -c 0 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 1 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 2 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 3 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 4 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 5 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 6 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 7 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 8 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 9 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 10 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 11 /bin/ping -l 100000 -q -s 10 -f localhost &
    - taskset -c 12 /bin/ping -l 100000 -q -s 10 -f localhost &
    - sleep 65

- name: run-cyclic-test
  image: simplestakingcom/tezedge-ci-builder:latest
  privileged: true
  user: root
  volumes:
    - name: build
      path: /artifacts
  commands:
    - /rt-tests/cyclictest --mlockall --smp --priority=80 --interval=200 --distance=0 --duration=1m --quiet > cyclictest.out
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_cyclic_test_result.sh 100 ./cyclictest.out

depends_on:
  - build

image_pull_secrets:
  - docker_pull_secret

node:
  tag: real-time-linux-runner

trigger:
  branch:
    - master
    - develop

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/

---
##############################################################################################################
kind: pipeline
name: unit-tests

workspace:
  path: /drone/src

steps:

- name: run-unit-tests
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cargo test --release --workspace

image_pull_secrets:
  - docker_pull_secret

trigger:
  branch:
    - xmaster
    - xdevelop

---
##############################################################################################################
kind: pipeline
name: integration-tests

clone:
  disable: true

workspace:
  path: /drone/src

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}

steps:

- name: protocol-runner/pool-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test --nocapture --ignored test_mutliple_protocol_runners_with_one_write_multiple_read_init_context
    - $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test --nocapture --ignored test_readonly_protocol_runner_connection_pool

- name: current-branch/head-shell-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_current_branch_on_level3_then_current_head_level4
    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_current_heads_to_level3

- name: simple-reorg-shell-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_reorg_with_different_current_branches

- name: multipass-blacklist-shell-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_current_head_with_malformed_blocks_and_check_blacklist

- name: bootstrapping-current-branch/heads-shell-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_bootstrapping_current_branch_on_level3_then_current_heads

- name: bootstrap-and-mempool-with_stats-shell-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_mempool_for_level1325

- name: p2p-threshold-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/p2p_test --nocapture --ignored test_peer_threshold

- name: p2p-pow-test-ok
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/p2p_test --nocapture --ignored test_proof_of_work_ok

- name: p2p-pow-test-fail
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    LOG_LEVEL: debug
    OCAML_LOG_ENABLED: false
    OUT_DIR: .
  commands:
    - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
    - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
    - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
    - $${TEST_ARTIFACTS_PATH}/tests/p2p_test --nocapture --ignored test_proof_of_work_fail

# TODO - TE-261: works correctly but is temporarily disabled to avoid blocking other things because this test is a bit heavy and takes a while to complete
# - name: replay-test
#   image: simplestakingcom/tezedge-ci-builder:latest
#   user: root
#   pull: if-not-exists
#   volumes:
#     - name: build
#       path: /artifacts
#     - name: tezedge-snapshots
#       path: /tmp/tezedge-snapshots
#     - name: tezedge-node-snapshotted-data
#       path: /tmp/tezedge_developer
#   commands:
#     - rm -rf /tmp/tezedge_developer/data
#     - unzip /tmp/tezedge-snapshots/tezedge_data_from_block_0_to_27914.zip
#     - mv _data /tmp/tezedge_developer/data
#     - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
#     - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
#     # light-node reads the path of `protocol-runner` from the config file, even if provided as argument.
#     # Copy the `protocol-runner` binary to the path specified in the config file.
#     - mkdir -p target/release
#     - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner target/release/
#     - $${BUILD_ARTIFACTS_PATH}/build_files/light-node replay --target-path=/tmp/replay --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --network=mainnet --to-block BLUP2BFdCq4qkFh6Sry7AGwa21D5hJUv8yLyWnNVLMwnLgF8JnF --tezos-data-dir=/tmp/tezedge_developer/data --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_6.json" --bootstrap-db-path=bootstrap_db

# TODO - TE-261: we don't have an equivalent of this right now
# - name: record/replay-context-action-file-test
#   image: simplestakingcom/tezedge-ci-builder:latest
#   pull: if-not-exists
#   user: root
#   volumes:
#     - name: build
#       path: /artifacts
#     - name: tests
#       path: /tests
#   environment:
#     RUST_BACKTRACE: 1
#     LOG_LEVEL: info
#     OCAML_LOG_ENABLED: false
#     OUT_DIR: .
#   commands:
#     - export LD_LIBRARY_PATH=$${BUILD_ARTIFACTS_PATH}/build_files/ffi && echo $${LD_LIBRARY_PATH}
#     - export PROTOCOL_RUNNER=$${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner && echo $${PROTOCOL_RUNNER}
#     - export CARGO_MANIFEST_DIR=$${TEST_ARTIFACTS_PATH}/test_data
#     # cleanup
#     - rm -rf /tmp/context-replay_output
#     - mkdir /tmp/context-replay_output
#     - export TARGET_ACTION_FILE="/tmp/context-replay_output/generated-1324-context-action-file.data"
#     # generate action file for 1324 blocks
#     - echo "... generating context action file ... $TARGET_ACTION_FILE"
#     - $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test --nocapture --ignored test_process_bootstrap_level1324_and_generate_action_file
#     - ls -lrt $${TARGET_ACTION_FILE}
#     # replay action file with rocksdb
#     - echo "... replay context action file with rocksdb... $TARGET_ACTION_FILE"
#     - $${BUILD_ARTIFACTS_PATH}/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store rocksdb
#     # replay action file with inmemory
#     - echo "... replay context action file with in-memory..."
#     - $${BUILD_ARTIFACTS_PATH}/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store inmem
#     # replay action file with btree
#     - echo "... replay context action file with in-memory..."
#     - $${BUILD_ARTIFACTS_PATH}/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store btree
#     # replay action file with sled
#     - echo "... replay context action file with sled..."
#     - $${BUILD_ARTIFACTS_PATH}/build_files/context-actions-replayer --input $${TARGET_ACTION_FILE} --output /tmp/context-replay_output --context-kv-store sled
#   # TODO: enable with new context
#   detach: true


depends_on:
  - build

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: tezedge-snapshots
    host:
      path: /usr/local/etc/tezedge-ci/data/tezedge-snapshots
  - name: tezedge-node-snapshotted-data
    host:
      path: /tezedge-data

trigger:
  branch:
    - xmaster
    - xdevelop

---
##############################################################################################################
kind: pipeline
name: benchmarks

workspace:
  path: /drone/src

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/benchmarks

steps:

  - name: run-benchmarks
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # build and run benches
      # just compile all benches
      - cargo bench --no-run -- --nocapture
      # run benches except tezos_messages (they have special step)
      - cargo bench --workspace --exclude tezos_messages --exclude networking --exclude tezos_interop -- --nocapture
      # run all other test benches
      - cargo bench --tests -- --nocapture

  # this is not triggered on pull request, because there is complex bench comparison on PR
  - name: criterion-benchmarks
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # message_benchmark
      - echo "" && echo "" && echo "...message_benchmark..." && echo "" && echo ""
      - cargo bench --bench message_benchmark -- --noplot
      # decoders_benchmark
      - echo "" && echo "" && echo "...decoders_benchmark..." && echo "" && echo ""
      - cargo bench --bench decoders_benchmark -- --noplot
      # stream_benchmark
      - echo "" && echo "" && echo "...stream_benchmark..." && echo "" && echo ""
      - cargo bench --bench stream_benchmark -- --noplot
      # interop_benchmark
      - echo "" && echo "" && echo "...interop_benchmark..." && echo "" && echo ""
      - cargo bench --bench interop_benchmark -- --noplot
      # interop_benchmark
      - echo "" && echo "" && echo "...predecessor_benchmarks..." && echo "" && echo ""
      - cargo bench --bench predecessor_benchmarks -- --noplot
    when:
      ref:
        exclude:
          - refs/pull/*/head

  # prepare and compiles (async) bench for target branch (only for PR)
  - name: compile-benchmarks-for-target-branch
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - rm -rf $${CACHE_DATA_PATH}
      - mkdir -p $${CACHE_DATA_PATH}
      - cd $${CACHE_DATA_PATH}
      - target_branch=$${DRONE_TARGET_BRANCH}
      - echo "...checkouting target branch - $target_branch"
      - git clone https://github.com/tezedge/tezedge.git && cd tezedge && git checkout $target_branch
      # message_benchmark
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
      - cargo bench --bench message_benchmark --no-run
      # decoders_benchmark
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
      - cargo bench --bench decoders_benchmark --no-run
      # stream_benchmark
      - cd $${CACHE_DATA_PATH}/tezedge/networking
      - cargo bench --bench stream_benchmark --no-run
      # interop_benchmark
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/interop
      - cargo bench --bench interop_benchmark --no-run
      # predecessor_benchmarks
      - cd $${CACHE_DATA_PATH}/tezedge/storage
      - cargo bench --bench predecessor_benchmarks --no-run
      # this step is async, so we will sync later on this file
      - echo > $${CACHE_DATA_PATH}/build.done
    when:
      ref:
        - refs/pull/*/head

  - name: compare-benchmarks-to-target-branch
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # we should have here precompiled target branch
      - $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh "$${CACHE_DATA_PATH}/build.done" 600
      - branch=$(git status | grep "On branch")
      - echo "...running bench for git - $branch"
      # message_benchmark - target
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
      - cargo bench --bench message_benchmark --no-run
      - cargo bench --bench message_benchmark -- --noplot --save-baseline message_benchmark_target_branch_result
      - critcmp --export message_benchmark_target_branch_result > $${CACHE_DATA_PATH}/message_benchmark_target_branch_result.json
      # decoders_benchmark - target
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
      - cargo bench --bench decoders_benchmark --no-run
      - cargo bench --bench decoders_benchmark -- --noplot --save-baseline decoders_benchmark_target_branch_result
      - critcmp --export decoders_benchmark_target_branch_result > $${CACHE_DATA_PATH}/decoders_benchmark_target_branch_result.json
      # stream_benchmark - target
      - cd $${CACHE_DATA_PATH}/tezedge/networking
      - cargo bench --bench stream_benchmark --no-run
      - cargo bench --bench stream_benchmark -- --noplot --save-baseline stream_benchmark_target_branch_result
      - critcmp --export stream_benchmark_target_branch_result > $${CACHE_DATA_PATH}/stream_benchmark_target_branch_result.json
      # interop_benchmark - target
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/interop
      - cargo bench --bench interop_benchmark --no-run
      - cargo bench --bench interop_benchmark -- --noplot --save-baseline interop_benchmark_target_branch_result
      - critcmp --export interop_benchmark_target_branch_result > $${CACHE_DATA_PATH}/interop_benchmark_target_branch_result.json
      # predecessor_benchmarks - target
      - cd $${CACHE_DATA_PATH}/tezedge/storage
      - cargo bench --bench predecessor_benchmarks --no-run
      - cargo bench --bench predecessor_benchmarks -- --noplot --save-baseline predecessor_benchmarks_target_branch_result
      - critcmp --export predecessor_benchmarks_target_branch_result > $${CACHE_DATA_PATH}/predecessor_benchmarks_target_branch_result.json
      # checkout current branch
      - current_branch=$${DRONE_SOURCE_BRANCH}
      - git reset --hard origin/$current_branch && git checkout $current_branch
      - branch=$(git status | grep "On branch")
      - echo "...running bench for git - $branch"
      # message_benchmark - current
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
      - cargo bench --bench message_benchmark --no-run
      - cargo bench --bench message_benchmark -- --noplot --save-baseline message_benchmark_current_branch_result
      - critcmp --export message_benchmark_current_branch_result > $${CACHE_DATA_PATH}/message_benchmark_current_branch_result.json
      # decoders_benchmark - current
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/messages
      - cargo bench --bench decoders_benchmark --no-run
      - cargo bench --bench decoders_benchmark -- --noplot --save-baseline decoders_benchmark_current_branch_result
      - critcmp --export decoders_benchmark_current_branch_result > $${CACHE_DATA_PATH}/decoders_benchmark_current_branch_result.json
      # stream_benchmark - current
      - cd $${CACHE_DATA_PATH}/tezedge/networking
      - cargo bench --bench stream_benchmark --no-run
      - cargo bench --bench stream_benchmark -- --noplot --save-baseline stream_benchmark_current_branch_result
      - critcmp --export stream_benchmark_current_branch_result > $${CACHE_DATA_PATH}/stream_benchmark_current_branch_result.json
      # interop_benchmark - current
      - cd $${CACHE_DATA_PATH}/tezedge/tezos/interop
      - cargo bench --bench interop_benchmark --no-run
      - cargo bench --bench interop_benchmark -- --noplot --save-baseline interop_benchmark_current_branch_result
      - critcmp --export interop_benchmark_current_branch_result > $${CACHE_DATA_PATH}/interop_benchmark_current_branch_result.json
      # predecessor_benchmarks - current
      - cd $${CACHE_DATA_PATH}/tezedge/storage
      - cargo bench --bench predecessor_benchmarks --no-run
      - cargo bench --bench predecessor_benchmarks -- --noplot --save-baseline predecessor_benchmarks_current_branch_result
      - critcmp --export predecessor_benchmarks_current_branch_result > $${CACHE_DATA_PATH}/predecessor_benchmarks_current_branch_result.json
      # compare results
      - echo "" && echo "" && echo "...message_benchmark..." && echo "" && echo ""
      - critcmp $${CACHE_DATA_PATH}/message_benchmark_target_branch_result.json $${CACHE_DATA_PATH}/message_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...decoders_benchmark..." && echo "" && echo ""
      - critcmp $${CACHE_DATA_PATH}/decoders_benchmark_target_branch_result.json $${CACHE_DATA_PATH}/decoders_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...interop_benchmark..." && echo "" && echo ""
      - critcmp $${CACHE_DATA_PATH}/interop_benchmark_target_branch_result.json $${CACHE_DATA_PATH}/interop_benchmark_current_branch_result.json --list
      - echo "" && echo "" && echo "...predecessor_benchmarks..." && echo "" && echo ""
      - critcmp $${CACHE_DATA_PATH}/predecessor_benchmarks_target_branch_result.json $${CACHE_DATA_PATH}/predecessor_benchmarks_current_branch_result.json --list
      - cp /dev/null "$${CACHE_DATA_PATH}/bench.done"
    when:
      ref:
        - refs/pull/*/head
    # TODO: needs rework and speedup with new CI
    detach: true

  - name: wait-for-completion
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      # we should have here precompiled target branch
      - $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh "$${CACHE_DATA_PATH}/build.done" 600
      - $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh "$${CACHE_DATA_PATH}/bench.done" 2400
    when:
      ref:
        - refs/pull/*/head

depends_on:
  - verify-real-time-environment

node:
  tag: real-time-linux-runner

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache

trigger:
  branch:
    - xmaster
    - xdevelop

##############################################################################################################
# This pipeline runs tezedge node and ocaml node,
# which connects just to local ocaml nodes (does not connect to Internet to or any live node)
##############################################################################################################
---
kind: pipeline
name: delphinet-wrk-tests
# default build goes with: --network "delphinet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
# - WRK_TEST_BLOCK_HEADER - block level for wrk performance test - it checks severel rpc on this block
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCAML_NODE_RPC_CONTEXT_ROOT_1: running ocaml node, e.g.: http://ocaml-node-run-1:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_2: running ocaml node, e.g.: http://ocaml-node-run-2:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_3: running ocaml node, e.g.: http://ocaml-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732

clone:
  disable: true

environment:
  NETWORK: delphinet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 520 # also check parameter --stop=
  WRK_TEST_BLOCK_HEADER: 100
  WRK_TEST_DURATION: 10  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 100 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-delphinet-run-1:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-delphinet-run-1:9734,ocaml-node-delphinet-run-2:9734,ocaml-node-delphinet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-delphinet-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-delphinet-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/delphinet-big-offline-tests

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - rm -rf $${CACHE_DATA_PATH}
    - mkdir -p $${CACHE_DATA_PATH}

# just run ocaml 3 delphinet snapshoted nodes
- name: ocaml-node-delphinet-run-1
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-delphinet-run-2
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-delphinet-run-3
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-ocaml-snapshoted-nodes
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-delphinet-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

# if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
- name: tezedge-old-node-delphinet-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - mkdir -p /tmp/tezedge-target-branch
    - cd /tmp/tezedge-target-branch
    - rm -rf tezedge
    - target_branch=$${DRONE_TARGET_BRANCH}
    - echo "...checkouting target branch - $target_branch"
    - git clone https://github.com/tezedge/tezedge.git && cd tezedge && git checkout $target_branch
    - cd /tmp/tezedge-target-branch/tezedge
    - export LD_LIBRARY_PATH=./tezos/sys/lib_tezos/artifacts:./tezos/interop/lib_tezos/artifacts:./target/release
    - cargo build --release --package light-node --package protocol-runner
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --protocol-runner ./target/release/protocol-runner --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --network "$${NETWORK}" --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_5.json" --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params
  when:
    ref:
      - refs/pull/*/head

- name: bootstrapping-tezedge
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared ocaml and tezedge node, that can run wrk tests

# compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with two nodes (current branch and ocaml))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk-performance-test-tezedge-new-vs-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  commands:
    - tezos-node-bootstrap performance-test --level=$${WRK_TEST_BLOCK_HEADER} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10
  when:
    ref:
      exclude:
      - refs/pull/*/head

# this is triggerd just on pull request to target branch
- name: bootstrapping-tezedge-target-branch
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${WRK_TEST_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (target_branch, current branch and ocaml))
- name: wrk-performance-test-tezedge-new-vs-ocaml-vs-tezedge-old
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  commands:
    - tezos-node-bootstrap performance-test --level=$${WRK_TEST_BLOCK_HEADER} --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10
  when:
    ref:
    - refs/pull/*/head

node:
  tag: real-time-linux-runner

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests
  - name: ocaml-node-delphinet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
  - name: ocaml-node-delphinet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
  - name: ocaml-node-delphinet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - verify-real-time-environment


#############################################################################################################
# This pipeline runs the python test framwork tests from the tezos repository aginst tezedge nodes - tests_008
#############################################################################################################
---
kind: pipeline
name: tezos-python-tests-008-edo2

clone:
  disable: true

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  TEZOS_SRC_PATH: /tezos-src/build_${DRONE_BUILD_NUMBER}/proto_008
  TEST_PROTO_DIR_SUFFIX: _008

steps:

- name: prepare-python-tests
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tezos-src
      path: /tezos-src
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - rm -rf $${TEZOS_SRC_PATH}/*
    # copy the tezos src file from the image to a shared volume
    - mkdir -p $${TEZOS_SRC_PATH}
    - cp -R /home/appuser/tezos-src/tezos $${TEZOS_SRC_PATH}/tezos
    # prepare modified python files for tests (compatibility with tezedge node)
    - cp $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py $${TEZOS_SRC_PATH}/tezos/tests_python/daemons/node.py
    - cp $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py $${TEZOS_SRC_PATH}/tezos/tests_python/launchers/sandbox.py
    - cp $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py $${TEZOS_SRC_PATH}/tezos/tests_python/tools/constants.py
    - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${TEZOS_SRC_PATH}/tezos/sandbox-patch-context.json
    # copy binaries to the test
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/light-node $${TEZOS_SRC_PATH}/tezos/
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${TEZOS_SRC_PATH}/tezos/
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/libtezos.so $${TEZOS_SRC_PATH}/tezos/
    # copy zcash-params init files - see constants.py light-node params
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params $${TEZOS_SRC_PATH}/tezos/
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params $${TEZOS_SRC_PATH}/tezos/

- name: baker-endorser-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_baker_endorser.py

- name: test-many-nodes
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_nodes.py

- name: test-multinode
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_multinode.py

- name: mempool-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_mempool.py

- name: fork-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
    CONTEXT_MUST_SURVIVE_RESTARTS: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_fork.py

- name: double-endorsement-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
    CONTEXT_MUST_SURVIVE_RESTARTS: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_double_endorsement.py

- name: test-programs
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_programs.py

- name: test-many-bakers
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_bakers.py

- name: test-contract-baker-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_baker.py

- name: test-contract-annotations-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_annotations.py
  # TODO: TE-275 remove failure: ignore
  # TODO - TE-220 - stop ignoring after resolving the rpc error handling
  failure: ignore

- name: basic-test
  image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
  pull: if-not-exists
  # TODO: TE-275 remove failure: ignore
  # TODO - TE-220 - stop ignoring after resolving the rpc error handling
  failure: ignore
  user: root
  volumes:
    - name: tezos-src
      path: /tezos-src
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - cd $${TEZOS_SRC_PATH}/tezos/tests_python
    - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
    - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
    - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_basic.py

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tezos-src
    host:
      path: /usr/local/etc/tezedge-ci/tezos-src

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs the python test framwork tests from the tezos repository aginst tezedge nodes - tests_009
##############################################################################################################
---
kind: pipeline
name: tezos-python-tests-009-florence

clone:
  disable: true

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  TEZOS_SRC_PATH: /tezos-src/build_${DRONE_BUILD_NUMBER}/proto_009
  TEST_PROTO_DIR_SUFFIX: _009

steps:

  - name: prepare-python-tests
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tezos-src
        path: /tezos-src
    environment:
      RUST_BACKTRACE: 1
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - rm -rf $${TEZOS_SRC_PATH}/*
      # copy the tezos src file from the image to a shared volume
      - mkdir -p $${TEZOS_SRC_PATH}
      - cp -R /home/appuser/tezos-src/tezos $${TEZOS_SRC_PATH}/tezos
      # prepare modified python files for tests (compatibility with tezedge node)
      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py $${TEZOS_SRC_PATH}/tezos/tests_python/daemons/node.py
      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py $${TEZOS_SRC_PATH}/tezos/tests_python/launchers/sandbox.py
      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py $${TEZOS_SRC_PATH}/tezos/tests_python/tools/constants.py
      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${TEZOS_SRC_PATH}/tezos/sandbox-patch-context.json
      # copy binaries to the test
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/light-node $${TEZOS_SRC_PATH}/tezos/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${TEZOS_SRC_PATH}/tezos/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/libtezos.so $${TEZOS_SRC_PATH}/tezos/
      # copy zcash-params init files - see constants.py light-node params
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params $${TEZOS_SRC_PATH}/tezos/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params $${TEZOS_SRC_PATH}/tezos/

  - name: baker-endorser-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_baker_endorser.py

  - name: test-many-nodes
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_nodes.py

  - name: test-multinode
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_multinode.py

  - name: mempool-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_mempool.py

  - name: fork-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
      CONTEXT_MUST_SURVIVE_RESTARTS: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_fork.py

  - name: double-endorsement-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
      CONTEXT_MUST_SURVIVE_RESTARTS: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_double_endorsement.py

  - name: test-programs
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_programs.py

  - name: test-many-bakers
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_bakers.py

  - name: test-contract-baker-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_baker.py

  - name: test-contract-annotations-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_annotations.py
    # TODO: TE-275 remove failure: ignore
    # TODO - TE-220 - stop ignoring after resolving the rpc error handling
    failure: ignore

  - name: basic-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    # TODO: TE-275 remove failure: ignore
    # TODO - TE-220 - stop ignoring after resolving the rpc error handling
    failure: ignore
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_basic.py

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tezos-src
    host:
      path: /usr/local/etc/tezedge-ci/tezos-src

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs the python test framwork tests from the tezos repository aginst tezedge nodes - tests_alpha
##############################################################################################################
---
kind: pipeline
name: tezos-python-tests-alpha

clone:
  disable: true

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  TEZOS_SRC_PATH: /tezos-src/build_${DRONE_BUILD_NUMBER}/proto_alpha
  TEST_PROTO_DIR_SUFFIX: _alpha

steps:

  - name: prepare-python-tests
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tezos-src
        path: /tezos-src
    environment:
      RUST_BACKTRACE: 1
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - rm -rf $${TEZOS_SRC_PATH}/*
      # copy the tezos src file from the image to a shared volume
      - mkdir -p $${TEZOS_SRC_PATH}
      - cp -R /home/appuser/tezos-src/tezos $${TEZOS_SRC_PATH}/tezos
      # prepare modified python files for tests (compatibility with tezedge node)
      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py $${TEZOS_SRC_PATH}/tezos/tests_python/daemons/node.py
      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py $${TEZOS_SRC_PATH}/tezos/tests_python/launchers/sandbox.py
      - cp $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py $${TEZOS_SRC_PATH}/tezos/tests_python/tools/constants.py
      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${TEZOS_SRC_PATH}/tezos/sandbox-patch-context.json
      # copy binaries to the test
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/light-node $${TEZOS_SRC_PATH}/tezos/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${TEZOS_SRC_PATH}/tezos/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/libtezos.so $${TEZOS_SRC_PATH}/tezos/
      # copy zcash-params init files - see constants.py light-node params
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params $${TEZOS_SRC_PATH}/tezos/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params $${TEZOS_SRC_PATH}/tezos/

  - name: baker-endorser-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_baker_endorser.py

  - name: test-many-nodes
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_nodes.py

  - name: test-multinode
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_multinode.py

  - name: mempool-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_mempool.py

  - name: fork-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
      CONTEXT_MUST_SURVIVE_RESTARTS: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_fork.py

  - name: double-endorsement-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
      CONTEXT_MUST_SURVIVE_RESTARTS: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_double_endorsement.py

  - name: test-programs
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_programs.py

  - name: test-many-bakers
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_many_bakers.py

  - name: test-contract-baker-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_baker.py

  - name: test-contract-annotations-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_contract_annotations.py
    # TODO: TE-275 remove failure: ignore
    # TODO - TE-220 - stop ignoring after resolving the rpc error handling
    failure: ignore

  - name: basic-test
    image: simplestakingcom/tezedge-ci-builder:v9.2-tezos-compatible
    pull: if-not-exists
    # TODO: TE-275 remove failure: ignore
    # TODO - TE-220 - stop ignoring after resolving the rpc error handling
    failure: ignore
    user: root
    volumes:
      - name: tezos-src
        path: /tezos-src
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - cd $${TEZOS_SRC_PATH}/tezos/tests_python
      - log_dir=$${TEZOS_SRC_PATH}/$${DRONE_STEP_NAME}_logs
      - mkdir -p $log_dir && echo "Logs are place on $${DRONE_SYSTEM_HOST} - $log_dir"
      - poetry run pytest -s --log-dir=$log_dir tests$${TEST_PROTO_DIR_SUFFIX}/test_basic.py

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tezos-src
    host:
      path: /usr/local/etc/tezedge-ci/tezos-src

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build
  - tezos-python-tests-008-edo2
  - tezos-python-tests-009-florence

#############################################################################################################
# This pipeline test the sandbox launcher and its rpc server with activation 009 protocol
#############################################################################################################
---
kind: pipeline
name: sandbox-launcher-test-009-florence

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:18732
  TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:3030
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files

steps:
- name: tezedge-sandbox-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - rm -rf /tmp/sandbox
    - mkdir -p /tmp/sandbox
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - export TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER="Y"
    - $${BUILD_ARTIFACTS_PATH}/build_files/sandbox --sandbox-rpc-port 3030 --light-node-path $${BUILD_ARTIFACTS_PATH}/build_files/light-node --protocol-runner-path $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --log-level info --tezos-client-path $${BUILD_ARTIFACTS_PATH}/build_files/tezos-client --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

- name: start-tezedge-node-via-rpc
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - sleep 5
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - curl --request POST "$LAUNCHER_URL/start" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_start_light_node_args.json

- name: check-running-nodes
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
    - nodes_count=$(echo $resp | jq '. | length')
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $nodes_count
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "localhost"
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "18732"

- name: wait-sandbox-node-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: always
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: init-client
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl --request POST "$LAUNCHER_URL/init_client" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_init_client_request.json)
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Tezos address added"

- name: check-wallets
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    # call get wallets
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl "$LAUNCHER_URL/wallets" | jq -S .)
    - echo "Wallets - $resp"
    - wallets_count=$(echo $resp | jq '. | length')
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $wallets_count

- name: activate_protocol
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl --request POST "$LAUNCHER_URL/activate_protocol" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_activate_protocol_009_request.json)
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected B"

- name: wait-sandbox-node-start-level-1
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=1 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: check-context-constants
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    # call context/constants on sandbox node
    - SANDBOX_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - resp=$(curl "$SANDBOX_URL/chains/main/blocks/head/context/constants" | jq -S .)
    - echo "Sandbox node context constants - $resp"
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "baking_reward_per_endorsement"
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "time_between_blocks"

- name: bake-empty-block
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl --request POST "$LAUNCHER_URL/bake" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_bake_empty_block.json)
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected block B"

- name: wait-sandbox-node-start-level-2
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=2 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: stop-tezedge-node-via-rpc
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl -X GET -I "$LAUNCHER_URL/stop" |  head -n 1 | cut -d$' ' -f2)
    # On a successfull stop, HTTP code 200 is returned
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 200 $resp

- name: check-running-nodes-empty
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
    - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
    - nodes_count=$(echo $resp | jq '. | length')
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $nodes_count

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

#############################################################################################################
# This pipeline test the sandbox launcher and its rpc server with activation 009 protocol
#############################################################################################################
---
kind: pipeline
name: sandbox-launcher-test-010-granada

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:18732
  TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT: http://tezedge-sandbox-run:3030
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files

steps:
  - name: tezedge-sandbox-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - rm -rf /tmp/sandbox
      - mkdir -p /tmp/sandbox
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - export TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER="Y"
      - $${BUILD_ARTIFACTS_PATH}/build_files/sandbox --sandbox-rpc-port 3030 --light-node-path $${BUILD_ARTIFACTS_PATH}/build_files/light-node --protocol-runner-path $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --log-level info --tezos-client-path $${BUILD_ARTIFACTS_PATH}/build_files/tezos-client --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: start-tezedge-node-via-rpc
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - sleep 5
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - curl --request POST "$LAUNCHER_URL/start" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_start_light_node_args.json

  - name: check-running-nodes
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
      - nodes_count=$(echo $resp | jq '. | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $nodes_count
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "localhost"
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "18732"

  - name: wait-sandbox-node-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: always
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: init-client
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl --request POST "$LAUNCHER_URL/init_client" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_init_client_request.json)
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Tezos address added"

  - name: check-wallets
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # call get wallets
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl "$LAUNCHER_URL/wallets" | jq -S .)
      - echo "Wallets - $resp"
      - wallets_count=$(echo $resp | jq '. | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $wallets_count

  - name: activate_protocol
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl --request POST "$LAUNCHER_URL/activate_protocol" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_activate_protocol_010_request.json)
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected B"

  - name: wait-sandbox-node-start-level-1
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=1 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: check-context-constants
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # call context/constants on sandbox node
      - SANDBOX_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - resp=$(curl "$SANDBOX_URL/chains/main/blocks/head/context/constants" | jq -S .)
      - echo "Sandbox node context constants - $resp"
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "baking_reward_per_endorsement"
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "time_between_blocks"

  - name: bake-empty-block
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl --request POST "$LAUNCHER_URL/bake" -H "Content-Type:application/json" --data @$${SANDBOX_ARTIFACTS_PATH}/sandbox_bake_empty_block.json)
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$resp" "Injected block B"

  - name: wait-sandbox-node-start-level-2
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=2 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: stop-tezedge-node-via-rpc
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl -X GET -I "$LAUNCHER_URL/stop" |  head -n 1 | cut -d$' ' -f2)
      # On a successfull stop, HTTP code 200 is returned
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 200 $resp

  - name: check-running-nodes-empty
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      - LAUNCHER_URL=$${TEZEDGE_LAUNCHER_RPC_CONTEXT_ROOT}
      - resp=$(curl "$LAUNCHER_URL/list_nodes" | jq -S .)
      - nodes_count=$(echo $resp | jq '. | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $nodes_count

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with sandbox configuration with 006 Carthage protocol and does transfer with tezos_client
##############################################################################################################
---
kind: pipeline
name: sandbox-carthage-node-tests

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-sandbox-carthage-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-carthage-run:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/sandbox-carthage-node-tests

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - rm -rf $${SANDBOX_DATA_PATH}
    - mkdir -p $${SANDBOX_DATA_PATH}
    - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
    - echo $${SANDBOX_DATA_PATH}
    - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
    - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
    - cp $${SANDBOX_ARTIFACTS_PATH}/006-carthage-protocol-parameters.json $${SANDBOX_DATA_PATH}

# run empty rust node and wait for it
- name: tezedge-node-sandbox-carthage-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /data/sandbox
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --actions-store-backend none --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

- name: wait-for-tezedge-to-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# run empty ocaml sandbox and wait for it
- name: ocaml-node-sandbox-carthage-run
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/ocaml_ip.txt
    - mkdir -p /home/tezos/data/
    - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
    - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
    - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv

- name: wait-for-ocaml-to-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT}

# connect both nodes with tezos-admin-client
- name: connect-ocaml-and-rust
  user: root
  image: tezos/tezos:v8.2
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
    - sleep 3
# TODO: instead of sleep 3, check status established
# TODO: write rpc test for check network/peers

# inject protocol to ocaml node, means it creates the first block with level 1
- name: inject-first-block-with-tezos_client
  user: root
  image: tezos/tezos:v8.2
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/006-carthage-protocol-parameters.json --timestamp $(TZ='AAA+1' date +%FT%TZ)

# test checks if this block is synchronized to rust node through p2p
- name: wait-for-sync-on-level-1
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: check-mempool-before-transfer
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    # get mempools
    - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
    - echo "Ocaml mempool - $ocaml_mempool"
    - echo "Tezedge mempool - $tezedge_mempool"
    # check if both are equals
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
    # check if applied is 0
    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count

# transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
- name: do-transfer-with-tezos_client
  user: root
  image: tezos/tezos:v8.2
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
    - sleep 1
    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
    - sleep 2

- name: check-mempool-after-transfer
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
  commands:
    # get mempools
    - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
    - echo "Ocaml mempool - $ocaml_mempool"
    - echo "Tezedge mempool - $tezedge_mempool"
    # check if both are equals
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
    # check if applied is 1
    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
    - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count

# transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
- name: bake-a-block-with-tezos_client
  user: root
  image: tezos/tezos:v8.2
  volumes:
    - name: sandbox-data
      path: /data/sandbox
  commands:
    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
    - sleep 1
    - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 bake for bootstrap2
    - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732

# test checks if this block is synchronized to rust node through p2p
- name: wait-for-sync-on-level-2
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# compare all rpc's from blocks 0 to 2 between defined nodes
- name: rpc-test-for-levels-0-2
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
    FROM_BLOCK_HEADER: 0
    TO_BLOCK_HEADER: 2
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
    - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: sandbox-data
    host:
      path: /usr/local/etc/tezedge-ci/data/sandbox

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with sandbox configuration with 008 EDO protocol and does transfer and integrates with baker/endorser
##############################################################################################################
---
kind: pipeline
name: baker/endorser-tests-008-edo2

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-sandbox-edo2-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-edo2-run:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/baker-endorser-tests-008-edo2
  TEZOS_LOG: debug
  LWT_LOG: debug

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - rm -rf $${SANDBOX_DATA_PATH}
      - mkdir -p $${SANDBOX_DATA_PATH}
      - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
      - echo $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/008-edo-protocol-parameters.json $${SANDBOX_DATA_PATH}

  # run empty rust node and wait for it
  - name: tezedge-node-sandbox-edo2-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: sandbox-data
        path: /data/sandbox
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --actions-store-backend none --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: wait-for-tezedge-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # run empty ocaml sandbox and wait for it
  - name: ocaml-node-sandbox-edo2-run
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/ocaml_ip.txt
      - mkdir -p /home/tezos/data/
      - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
      - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
      - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv

  - name: wait-for-ocaml-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT}

  # connect both nodes with tezos-admin-client
  - name: connect-ocaml-and-rust
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 3
  # TODO: instead of sleep 3, check status established
  # TODO: write rpc test for check network/peers

  # inject protocol to ocaml node, means it creates the first block with level 1
  - name: inject-first-block-with-tezos_client
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/008-edo-protocol-parameters.json

  # test checks if this block is synchronized to rust node through p2p
  - name: wait-for-sync-on-level-1
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: check-mempool-before-transfer
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 0
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count

  # transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
  - name: do-transfer-with-tezos_client
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 1
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
      - sleep 2

  - name: check-mempool-after-transfer
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 1
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count

  - name: run-tezos-endorser-008-PtEdo2Zk
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
      - tezos-endorser-008-PtEdo2Zk -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir -l run bootstrap1 --endorsement-delay 1 &
      - sleep 3

  - name: check-endorsements-in-mempools
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 2 (transfer + endorsement)
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $applied_count
      - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_endorsements_count

  - name: run-tezos-baker-008-PtEdo2Zk
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - context_path="$${SANDBOX_DATA_PATH}/tezedge/tezos-node"
      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
      - tezos-baker-008-PtEdo2Zk -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 1

  # test checks if this block is synchronized to rust node through p2p
  - name: wait-for-sync-on-level-2
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # compare all rpc's from blocks 0 to 2 between defined nodes
  - name: rpc-test-for-levels-0-2
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      FROM_BLOCK_HEADER: 0
      TO_BLOCK_HEADER: 2
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: sandbox-data
    host:
      path: /usr/local/etc/tezedge-ci/data/sandbox

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with sandbox configuration with 009 Florence protocol and does transfer and integrates with baker/endorser
##############################################################################################################
---
kind: pipeline
name: baker/endorser-tests-009-florence

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-sandbox-florence-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-florence-run:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/baker-endorser-tests-009-florence
  TEZOS_LOG: debug
  LWT_LOG: debug

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - rm -rf $${SANDBOX_DATA_PATH}
      - mkdir -p $${SANDBOX_DATA_PATH}
      - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
      - echo $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/009-florence-protocol-parameters.json $${SANDBOX_DATA_PATH}

  # run empty rust node and wait for it
  - name: tezedge-node-sandbox-florence-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: sandbox-data
        path: /data/sandbox
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --actions-store-backend none --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: wait-for-tezedge-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # run empty ocaml sandbox and wait for it
  - name: ocaml-node-sandbox-florence-run
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/ocaml_ip.txt
      - mkdir -p /home/tezos/data/
      - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
      - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
      - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv

  - name: wait-for-ocaml-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT}

  # connect both nodes with tezos-admin-client
  - name: connect-ocaml-and-rust
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 3
  # TODO: instead of sleep 3, check status established
  # TODO: write rpc test for check network/peers

  # inject protocol to ocaml node, means it creates the first block with level 1
  - name: inject-first-block-with-tezos_client
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/009-florence-protocol-parameters.json

  # test checks if this block is synchronized to rust node through p2p
  - name: wait-for-sync-on-level-1
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: check-mempool-before-transfer
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 0
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count

  # transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
  - name: do-transfer-with-tezos_client
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 1
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
      - sleep 2

  - name: check-mempool-after-transfer
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 1
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count

  - name: run-tezos-endorser-009-PsFLoren
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
      - tezos-endorser-009-PsFLoren -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir -l run bootstrap1 --endorsement-delay 1 &
      - sleep 3

  - name: check-endorsements-in-mempools
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 2 (transfer + endorsement)
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $applied_count
      - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_endorsements_count

  - name: run-tezos-baker-009-PsFLoren
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - context_path="$${SANDBOX_DATA_PATH}/tezedge/tezos-node"
      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
      - tezos-baker-009-PsFLoren -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 1

  # test checks if this block is synchronized to rust node through p2p
  - name: wait-for-sync-on-level-2
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # compare all rpc's from blocks 0 to 2 between defined nodes
  - name: rpc-test-for-levels-0-2
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      FROM_BLOCK_HEADER: 0
      TO_BLOCK_HEADER: 2
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: sandbox-data
    host:
      path: /usr/local/etc/tezedge-ci/data/sandbox

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with sandbox configuration with 010 Granada protocol and does transfer and integrates with baker/endorser
##############################################################################################################
---
kind: pipeline
name: baker/endorser-tests-010-granada

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-sandbox-granada-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-granada-run:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files
  SANDBOX_DATA_PATH: /data/sandbox/build_${DRONE_BUILD_NUMBER}/baker-endorser-tests-010-granada
  TEZOS_LOG: debug
  LWT_LOG: debug

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: build
        path: /artifacts
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - rm -rf $${SANDBOX_DATA_PATH}
      - mkdir -p $${SANDBOX_DATA_PATH}
      - mkdir -p $${SANDBOX_DATA_PATH}/tezos-client
      - echo $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/tezedge_drone_sandbox.config $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/sandbox-patch-context.json $${SANDBOX_DATA_PATH}
      - cp $${SANDBOX_ARTIFACTS_PATH}/010-granada-protocol-parameters.json $${SANDBOX_DATA_PATH}

  # run empty rust node and wait for it
  - name: tezedge-node-sandbox-granada-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: sandbox-data
        path: /data/sandbox
    environment:
      SODIUM_USE_PKG_CONFIG: 1
      RUST_BACKTRACE: 1
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/tezedge_ip.txt
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file $${SANDBOX_DATA_PATH}/tezedge_drone_sandbox.config --actions-store-backend none --identity-expected-pow 0.0 --identity-file $${SANDBOX_DATA_PATH}/tezedge/identity.json --tezos-data-dir $${SANDBOX_DATA_PATH}/tezedge/tezos-node --bootstrap-db-path $${SANDBOX_DATA_PATH}/tezedge/light-node --network sandbox --protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --synchronization-thresh 0 --sandbox-patch-context-json-file $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: wait-for-tezedge-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # run empty ocaml sandbox and wait for it
  - name: ocaml-node-sandbox-granada-run
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${SANDBOX_DATA_PATH}/ocaml_ip.txt
      - mkdir -p /home/tezos/data/
      - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
      - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
      - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox $${SANDBOX_DATA_PATH}/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --synchronisation-threshold 0 -vv

  - name: wait-for-ocaml-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT}

  # connect both nodes with tezos-admin-client
  - name: connect-ocaml-and-rust
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 3
  # TODO: instead of sleep 3, check status established
  # TODO: write rpc test for check network/peers

  # inject protocol to ocaml node, means it creates the first block with level 1
  - name: inject-first-block-with-tezos_client
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --block genesis activate protocol PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV with fitness 1 and key activator and parameters $${SANDBOX_DATA_PATH}/010-granada-protocol-parameters.json

  # test checks if this block is synchronized to rust node through p2p
  - name: wait-for-sync-on-level-1
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=1 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  - name: check-mempool-before-transfer
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 0
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 0 $applied_count

  # transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
  - name: do-transfer-with-tezos_client
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 1
      - tezos-client --base-dir $${SANDBOX_DATA_PATH}/tezos-client -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
      - sleep 2

  - name: check-mempool-after-transfer
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 1
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_count

  - name: run-tezos-endorser-010-PtGRANAD
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
      - tezos-endorser-010-PtGRANAD -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir -l run bootstrap1 --endorsement-delay 1 &
      - sleep 3

  - name: check-endorsements-in-mempools
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
    commands:
      # get mempools
      - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
      - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
      - echo "Ocaml mempool - $ocaml_mempool"
      - echo "Tezedge mempool - $tezedge_mempool"
      # check if both are equals
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
      # check if applied is 2 (transfer + endorsement)
      - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 2 $applied_count
      - applied_endorsements_count=$(echo $tezedge_mempool | jq  '[.applied[] | select(.contents[].kind | startswith("endorsement"))] | length')
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh 1 $applied_endorsements_count

  - name: run-tezos-baker-010-PtGRANAD
    user: root
    image: tezos/tezos:v9-release
    volumes:
      - name: sandbox-data
        path: /data/sandbox
    commands:
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - context_path="$${SANDBOX_DATA_PATH}/tezedge/tezos-node"
      - client_data_dir="$${SANDBOX_DATA_PATH}/tezos-client"
      - tezos-baker-010-PtGRANAD -A `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt` -P 18732 --log-requests --base-dir $client_data_dir run with local node $context_path bootstrap2 &
      - tezos-admin-client -A `cat $${SANDBOX_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${SANDBOX_DATA_PATH}/tezedge_ip.txt`:9732
      - sleep 1

  # test checks if this block is synchronized to rust node through p2p
  - name: wait-for-sync-on-level-2
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=2 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT} $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # compare all rpc's from blocks 0 to 2 between defined nodes
  - name: rpc-test-for-levels-0-2
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
      FROM_BLOCK_HEADER: 0
      TO_BLOCK_HEADER: 2
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: sandbox-data
    host:
      path: /usr/local/etc/tezedge-ci/data/sandbox

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with mainnet configuration againts ocaml node with different network cfg
#
##############################################################################################################
---
kind: pipeline
name: connect-from-different-network-test

clone:
  disable: true

environment:
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 0
  SODIUM_USE_PKG_CONFIG: 1
  OCAML_NETWORK: edonet
  TEZEDGE_NETWORK: mainnet
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-run:8732
  TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT: http://tezedge-updated-node-run-mainnet:18732
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/connect-from-different-network-test

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - rm -rf $${CACHE_DATA_PATH}
      - mkdir -p $${CACHE_DATA_PATH}

  - name: tezedge-updated-node-run-mainnet
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${CACHE_DATA_PATH}/tezedge_ip.txt
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --network $${TEZEDGE_NETWORK} --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_6.json" --protocol-runner $${CACHE_DATA_PATH}/protocol-runner --tezos-data-dir $${CACHE_DATA_PATH}/tezos-node-data --bootstrap-db-path $${CACHE_DATA_PATH}/light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: bootstrapping-tezedge
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT}

    # just run ocaml snapshoted node
  - name: ocaml-node-run
    user: root
    image: tezos/tezos:v8.2
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > $${CACHE_DATA_PATH}/ocaml_ip.txt
      - mkdir /home/tezos/data/
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_7.json /home/tezos/data/identity.json
      - rm -f /home/tezos/data/config.json
      - tezos-node config init --data-dir /home/tezos/data --network $${OCAML_NETWORK}
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${OCAML_NETWORK} --no-bootstrap-peers

  - name: wait-ocaml-node-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT}

  - name: ocaml-node-connect-to-tezedge
    user: root
    image: tezos/tezos:v8.2
    volumes:
      - name: cache
        path: /data/cache
    commands:
      # catch error from tezos-admin-client
      - tezos-admin-client -A `cat $${CACHE_DATA_PATH}/ocaml_ip.txt` -P 8732 connect address `cat $${CACHE_DATA_PATH}/tezedge_ip.txt`:9732 &> $${CACHE_DATA_PATH}/tezos-admin-client-error.log &
      - sleep 1
      - cat $${CACHE_DATA_PATH}/tezos-admin-client-error.log

  - name: check-ocaml-error
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    commands:
      - error=$(cat $${CACHE_DATA_PATH}/tezos-admin-client-error.log)
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$error" "Rejected peer connection"
      - $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh "$error" "no common network protocol"

  - name: check-ocaml-still-running
    image: simplestakingcom/tezos-node-bootstrap:latest
    pull: if-not-exists
    commands:
      - tezos-node-bootstrap bootstrap --level=0 --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node and ocaml node,
# which connects just to local ocaml nodes (does not connect to Internet to or any live node)
##############################################################################################################
---
kind: pipeline
name: delphinet-big-offline-tests
# default build goes with: --network "delphinet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
# - WRK_TEST_BLOCK_HEADER - block level for wrk performance test - it checks severel rpc on this block
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCAML_NODE_RPC_CONTEXT_ROOT_1: running ocaml node, e.g.: http://ocaml-node-run-1:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_2: running ocaml node, e.g.: http://ocaml-node-run-2:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_3: running ocaml node, e.g.: http://ocaml-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732

clone:
  disable: true

environment:
  NETWORK: delphinet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 520 # also check parameter --stop=
  WRK_TEST_BLOCK_HEADER: 100
  WRK_TEST_DURATION: 10  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 100 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-delphinet-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-delphinet-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-delphinet-run-3:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-delphinet-run-1:9734,ocaml-node-delphinet-run-2:9734,ocaml-node-delphinet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-delphinet-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-delphinet-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-delphinet-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/delphinet-big-offline-tests

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - rm -rf $${CACHE_DATA_PATH}
    - mkdir -p $${CACHE_DATA_PATH}

# just run ocaml 3 delphinet snapshoted nodes
- name: ocaml-node-delphinet-run-1
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-delphinet-run-2
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-delphinet-run-3
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-ocaml-snapshoted-nodes
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-delphinet-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-delphinet-tezedge
  image: blockwatch/tzindex:latest
  pull: always
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-delphinet-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521"]

- name: tz-indexer-delphinet-ocaml
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-ocaml-data
      path: /data
  environment:
    TZ_RPC_HOST: ocaml-node-delphinet-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
    - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCAML_NODE_INDEXER_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests
  - name: ocaml-node-delphinet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
  - name: ocaml-node-delphinet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
  - name: ocaml-node-delphinet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with edo2net configuration againts ocaml node with edo2net snapshot
##############################################################################################################
---
kind: pipeline
name: edo2net-offline-tests

clone:
  disable: true

environment:
  NETWORK: edo2net
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 256 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-edo2net-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-edo2net-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-edo2net-run-3:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-edo2net-run-1:9734,ocaml-node-edo2net-run-2:9734,ocaml-node-edo2net-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-edo2net-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-edo2net-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/edo2net-offline-tests

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - rm -rf $${CACHE_DATA_PATH}
      - mkdir -p $${CACHE_DATA_PATH}

  # just run ocaml 3 edo2net snapshoted nodes
  - name: ocaml-node-edo2net-run-1
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-edo2net-snapshot-data-1
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-edo2net-run-2
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-edo2net-snapshot-data-2
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-edo2net-run-3
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-edo2net-snapshot-data-3
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: wait-for-ocaml-snapshoted-nodes
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

  - name: tezedge-updated-node-edo2net-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
      - echo "peers - $PEERS"
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: bootstrapping-tezedge
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

  # run both indexers on background to fill data
  - name: tz-indexer-edo2net-tezedge
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-tezedge-data
        path: /data
    environment:
      TZ_RPC_HOST: tezedge-updated-node-edo2net-run
      TZ_RPC_PORT: 18732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=257"]

  - name: tz-indexer-edo2net-ocaml
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-ocaml-data
        path: /data
    environment:
      TZ_RPC_HOST: ocaml-node-edo2net-run-1
      TZ_RPC_PORT: 8732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=257"]

  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: rpc-test
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: indexer-test
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCAML_NODE_INDEXER_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests
  - name: ocaml-node-edo2net-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-1
  - name: ocaml-node-edo2net-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-2
  - name: ocaml-node-edo2net-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-edo2net-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with mainnet configuration againts ocaml node with mainnet snapshot
##############################################################################################################
---
kind: pipeline
name: mainnet-offline-tests

clone:
  disable: true

environment:
  NETWORK: mainnet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 130 # also check parameter --stop=
  TO_BLOCK_HEADER_FOR_RPC: 3
  SODIUM_USE_PKG_CONFIG: 1
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-mainnet-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-mainnet-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-mainnet-run-3:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-mainnet-run-1:9734,ocaml-node-mainnet-run-2:9734,ocaml-node-mainnet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-mainnet-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-mainnet-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/mainnet-offline-tests

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - rm -rf $${CACHE_DATA_PATH}
      - mkdir -p $${CACHE_DATA_PATH}

  # just run ocaml 3 mainnet snapshoted nodes
  - name: ocaml-node-mainnet-run-1
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-mainnet-snapshot-data-1
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-mainnet-run-2
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-mainnet-snapshot-data-2
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-mainnet-run-3
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-mainnet-snapshot-data-3
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: wait-for-ocaml-snapshoted-nodes
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

  - name: tezedge-updated-node-mainnet-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
      - echo "peers - $PEERS"
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: bootstrapping-tezedge
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

  # run both indexers on background to fill data
  - name: tz-indexer-mainnet-tezedge
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-tezedge-data
        path: /data
    environment:
      TZ_RPC_HOST: tezedge-updated-node-mainnet-run
      TZ_RPC_PORT: 18732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=131"]

  - name: tz-indexer-mainnet-ocaml
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-ocaml-data
        path: /data
    environment:
      TZ_RPC_HOST: ocaml-node-mainnet-run-1
      TZ_RPC_PORT: 8732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=131"]

  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: rpc-test
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=votes/listings,/minimal_valid_time,/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes,/context/raw/bytes
      # mainnet rpcs of protocol 001 are too slow
      - export TO_BLOCK_HEADER=$${TO_BLOCK_HEADER_FOR_RPC}
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: indexer-test
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCAML_NODE_INDEXER_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: ocaml-node-mainnet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-1
  - name: ocaml-node-mainnet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-2
  - name: ocaml-node-mainnet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-mainnet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with florencenet configuration againts ocaml node with florencenet snapshot
##############################################################################################################
---
kind: pipeline
name: florencenet-offline-tests

clone:
  disable: true

environment:
  NETWORK: florencenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 600 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-florencenet-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-florencenet-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-florencenet-run-3:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-florencenet-run-1:9734,ocaml-node-florencenet-run-2:9734,ocaml-node-florencenet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-florencenet-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/florencenet-offline-tests

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - rm -rf $${CACHE_DATA_PATH}
      - mkdir -p $${CACHE_DATA_PATH}

  # just run ocaml 3 florencenet snapshoted nodes
  - name: ocaml-node-florencenet-run-1
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-florencenet-snapshot-data-1
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-florencenet-run-2
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-florencenet-snapshot-data-2
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-florencenet-run-3
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-florencenet-snapshot-data-3
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: wait-for-ocaml-snapshoted-nodes
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

  - name: tezedge-updated-node-florencenet-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
      - echo "peers - $PEERS"
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: bootstrapping-tezedge
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

  # run both indexers on background to fill data
  - name: tz-indexer-florencenet-tezedge
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-tezedge-data
        path: /data
    environment:
      TZ_RPC_HOST: tezedge-updated-node-florencenet-run
      TZ_RPC_PORT: 18732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=601"]

  - name: tz-indexer-florencenet-ocaml
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-ocaml-data
        path: /data
    environment:
      TZ_RPC_HOST: ocaml-node-florencenet-run-1
      TZ_RPC_PORT: 8732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=601"]

  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: rpc-test
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=/context/raw/bytes
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: indexer-test
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCAML_NODE_INDEXER_ROOT}

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: ocaml-node-florencenet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-1
  - name: ocaml-node-florencenet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-2
  - name: ocaml-node-florencenet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline runs tezedge node with florencenet configuration againts ocaml node with florencenet snapshot
##############################################################################################################
---
kind: pipeline
name: granadanet-offline-tests

clone:
  disable: true

environment:
  NETWORK: granadanet
  FROM_BLOCK_HEADER: 4050 # 4096-4097 is florence-granada proto switch
  TO_BLOCK_HEADER: 5000 # also check parameter --stop=
  SODIUM_USE_PKG_CONFIG: 1
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-granadanet-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-granadanet-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-granadanet-run-3:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-granadanet-run-1:9734,ocaml-node-granadanet-run-2:9734,ocaml-node-granadanet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-granadanet-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-granadanet-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/granadanet-offline-tests

steps:
  - name: prepare-data
    image: alpine/git
    user: root
    volumes:
      - name: cache
        path: /data/cache
    commands:
      - rm -rf $${CACHE_DATA_PATH}
      - mkdir -p $${CACHE_DATA_PATH}

  # just run ocaml 3 granadanet snapshoted nodes
  - name: ocaml-node-granadanet-run-1
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-granadanet-snapshot-data-1
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-granadanet-run-2
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-granadanet-snapshot-data-2
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: ocaml-node-granadanet-run-3
    user: root
    image: tezos/tezos:v9-release
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: ocaml-node-granadanet-snapshot-data-3
        path: /home/tezos/data
      - name: cache
        path: /data/cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
      - rm -f /home/tezos/data/lock
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
      - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

  - name: wait-for-ocaml-snapshoted-nodes
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

  - name: tezedge-updated-node-granadanet-run
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /data/cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
      - echo "peers - $PEERS"
      - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

  - name: bootstrapping-tezedge
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

  # run both indexers on background to fill data
  - name: tz-indexer-granadanet-tezedge
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-tezedge-data
        path: /data
    environment:
      TZ_RPC_HOST: tezedge-updated-node-granadanet-run
      TZ_RPC_PORT: 18732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=5001"]

  - name: tz-indexer-granadanet-ocaml
    image: blockwatch/tzindex:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: indexer-ocaml-data
        path: /data
    environment:
      TZ_RPC_HOST: ocaml-node-granadanet-run-1
      TZ_RPC_PORT: 8732
      TZ_SERVER_ADDR: 0.0.0.0
      TZ_SERVER_PORT: 8002
      TZ_SERVER_CORS_ENABLE: true
      TZ_DATABASE_PATH: /data/index
      TZ_SNAPSHOT_PATH: /data/snapshots
    command: ["tzindex", "run", "--stop=5001"]

  # compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: rpc-test
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    volumes:
      - name: tests
        path: /tests
    environment:
      RUST_BACKTRACE: 1
    commands:
      - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
      - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
      - export IGNORE_PATH_PATTERNS=/context/raw/bytes,/live_blocks
      - export IGNORE_JSON_PROPERTIES=max_operations_ttl
      - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

  # compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
  - name: indexer-test
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCAML_NODE_INDEXER_ROOT}
    # TODO: remove once indexer is released: https://github.com/blockwatch-cc/tzindex/issues/35
    detach: true

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: ocaml-node-granadanet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-1
  - name: ocaml-node-granadanet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-2
  - name: ocaml-node-granadanet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-granadanet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - xmaster
    - xdevelop

depends_on:
  - build

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (latest) from develop branch
##############################################################################################################
---
kind: pipeline
name: docker-deploy-develop

steps:
- name: build-light-node-image
  image: plugins/docker
  settings:
    repo: simplestakingcom/tezedge
    target: light-node
    tag: latest
    dockerfile: docker/distroless/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

- name: build-light-node-debug-image
  image: plugins/docker
  settings:
    repo: simplestakingcom/tezedge
    target: light-node
    tag: latest-frame-pointers-enabled
    dockerfile: docker/distroless/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
      - BASE_IMAGE=simplestakingcom/tezedge-libs:latest-profile
      - RUSTFLAGS=-Cforce-frame-pointers=yes
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

- name: build-sandbox-image
  image: plugins/docker
  settings:
    repo: simplestakingcom/tezedge
    target: sandbox
    tag: sandbox-latest
    dockerfile: docker/distroless/Dockerfile
    build_args:
      - SOURCE_BRANCH=develop
    username:
      from_secret: docker_hub_username
    password:
      from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  branch: develop
  event: push

depends_on:
  - unit-tests
  - benchmarks
  - integration-tests
  - sandbox-launcher-test-009-florence
  - sandbox-launcher-test-010-granada
  - sandbox-carthage-node-tests
  - baker/endorser-tests-008-edo2
  - baker/endorser-tests-009-florence
  - baker/endorser-tests-010-granada
  - tezos-python-tests-008-edo2
  - tezos-python-tests-009-florence
  - connect-from-different-network-test
  - delphinet-big-offline-tests
  - edo2net-offline-tests
  - mainnet-offline-tests
  - florencenet-offline-tests
  - granadanet-offline-tests

##############################################################################################################
# This pipeline builds a docker image and pushes it to docker HUB - (versioned/tagged) from master/release
##############################################################################################################
---
kind: pipeline
name: docker-deploy-release-tag-version

steps:
  - name: build-light-node-image
    image: plugins/docker
    settings:
      repo: simplestakingcom/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}
        - latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-light-node-debug-image
    image: plugins/docker
    settings:
      repo: simplestakingcom/tezedge
      target: light-node
      tags:
        - ${DRONE_TAG}
        - latest-frame-pointers-enabled-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
        - BASE_IMAGE=simplestakingcom/tezedge-libs:latest-profile
        - RUSTFLAGS=-Cforce-frame-pointers=yes
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

  - name: build-sandbox-image
    image: plugins/docker
    settings:
      repo: simplestakingcom/tezedge
      target: sandbox
      tags:
        - sandbox-${DRONE_TAG}
        - sandbox-latest-release
      dockerfile: docker/distroless/Dockerfile
      build_args:
        - SOURCE_BRANCH=${DRONE_TAG}
      username:
        from_secret: docker_hub_username
      password:
        from_secret: docker_hub_pswd

image_pull_secrets:
  - docker_pull_secret

trigger:
  ref: refs/tags/**
  event: tag

depends_on:
  - unit-tests
  - benchmarks
  - integration-tests
  - sandbox-launcher-test-009-florence
  - sandbox-launcher-test-010-granada
  - sandbox-carthage-node-tests
  - baker/endorser-tests-008-edo2
  - baker/endorser-tests-009-florence
  - baker/endorser-tests-010-granada
  - tezos-python-tests-008-edo2
  - tezos-python-tests-009-florence
  - connect-from-different-network-test
  - delphinet-big-offline-tests
  - edo2net-offline-tests
  - mainnet-offline-tests
  - florencenet-offline-tests
  - granadanet-offline-tests

---
##############################################################################################################
# This pipeline runs valgrind dhat against `decode_stream` test on current and target branches
# comparing total dynamic memory allocation amount and failing if the current is increased more than 10%
##############################################################################################################
kind: pipeline
name: dhat-decoding

workspace:
  path: /drone/src

environment:
  TARGET_BRANCH: ${DRONE_TARGET_BRANCH}
  SOURCE_BRANCH: ${DRONE_SOURCE_BRANCH}

steps:

- name: run-dhat
  image: simplestakingcom/tezedge-ci-builder:latest
  user: root
  commands:
    - git remote add -f upstream https://github.com/tezedge/tezedge.git
    - apt-get update && apt-get install -y valgrind
    - cd tezos/messages
    - cargo build --message-format json --test decode_stream |  jq --raw-output '.executable // empty' > source.cmd
    - valgrind --tool=exp-dhat --show-top-n=1 $(cat source.cmd) 2>&1 | tee dhat-source.out | sed '/======== ORDERED BY/Q'
    - git reset --hard upstream/$TARGET_BRANCH
    - cargo clean && cargo build --message-format json --test decode_stream |  jq --raw-output '.executable // empty' > target.cmd
    - valgrind --tool=exp-dhat --show-top-n=1 $(cat target.cmd) 2>&1 | tee dhat-target.out | sed '/======== ORDERED BY/Q'
    - 'source_total=$(grep "tot_alloc" < dhat-source.out | sed -E -e "s/.*tot_alloc: *([0-9,]*).*/\\\\1/" -e "s/,//g")'
    - 'target_total=$(grep "tot_alloc" < dhat-target.out | sed -E -e "s/.*tot_alloc: *([0-9,]*).*/\\\\1/" -e "s/,//g")'
    - delta=$((source_total - target_total))
    - echo Memory allocation delta $delta
    - test $delta -le 0 && echo 'Decreased or unchanged' && exit 0
    - test $((delta * 20)) -le $target_total && echo 'Increase within 5%' && exit 0
    - echo 'Increase is more than 5%' && exit 1

image_pull_secrets:
  - docker_pull_secret

trigger:
  branch:
    - xmaster
    - xdevelop


##############################################################################################################
# This pipeline runs tezedge node and ocaml node,
# which connects just to local ocaml nodes (does not connect to Internet to or any live node)
##############################################################################################################
---
kind: pipeline
name: florencenet-wrk-tests
# default build goes with: --network "delphinet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
# - WRK_TEST_BLOCK_HEADER - block level for wrk performance test - it checks severel rpc on this block
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCAML_NODE_RPC_CONTEXT_ROOT_1: running ocaml node, e.g.: http://ocaml-node-run-1:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_2: running ocaml node, e.g.: http://ocaml-node-run-2:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_3: running ocaml node, e.g.: http://ocaml-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732

clone:
  disable: true

environment:
  NETWORK: florencenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 520 # also check parameter --stop=
  WRK_TEST_BLOCK_HEADER: 100
  WRK_TEST_DURATION: 10  # in seconds
  WRK2_TEST_DURATION: 10  # in seconds
  WRK2_REQ_RATE: 100  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 100 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-florencenet-run-1:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-florencenet-run-1:9734,ocaml-node-florencenet-run-2:9734,ocaml-node-florencenet-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-florencenet-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-florencenet-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-florencenet-tezedge:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/florencenet-big-offline-tests

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - rm -rf $${CACHE_DATA_PATH}
    - mkdir -p $${CACHE_DATA_PATH}

# just run ocaml 3 florencenet snapshoted nodes
- name: ocaml-node-florencenet-run-1
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-florencenet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-florencenet-run-2
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-florencenet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-florencenet-run-3
  user: root
  image: tezos/tezos:v9-release
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-florencenet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-ocaml-snapshoted-nodes
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1} $${OCAML_NODE_RPC_CONTEXT_ROOT_2} $${OCAML_NODE_RPC_CONTEXT_ROOT_3}

- name: tezedge-updated-node-florencenet-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --actions-store-backend none --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

# if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
- name: tezedge-old-node-florencenet-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - mkdir -p /tmp/tezedge-target-branch
    - cd /tmp/tezedge-target-branch
    - rm -rf tezedge
    - target_branch=$${DRONE_TARGET_BRANCH}
    - echo "...checkouting target branch - $target_branch"
    - git clone https://github.com/tezedge/tezedge.git && cd tezedge && git checkout $target_branch
    - cd /tmp/tezedge-target-branch/tezedge
    - export LD_LIBRARY_PATH=./tezos/sys/lib_tezos/artifacts:./tezos/interop/lib_tezos/artifacts:./target/release
    - cargo build --release --package light-node --package protocol-runner
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --protocol-runner ./target/release/protocol-runner --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --network "$${NETWORK}" --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_5.json" --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params
  when:
    ref:
      - refs/pull/*/head

- name: bootstrapping-tezedge
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared ocaml and tezedge node, that can run wrk tests

# compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with two nodes (current branch and ocaml))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk-performance-test-tezedge-new-vs-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  commands:
    - tezos-node-bootstrap performance-test --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10
  when:
    ref:
      exclude:
      - refs/pull/*/head

# this is triggerd just on pull request to target branch
- name: bootstrapping-tezedge-target-branch
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${WRK_TEST_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (target_branch, current branch and ocaml))
- name: wrk-performance-test-tezedge-new-vs-ocaml-vs-tezedge-old
  image: akoptelov/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap performance-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=10 --throughput-threshold=10 --latency-no-fail --url-file=/perf/wrk-rpc-list.txt
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (target_branch, current branch and ocaml))
- name: wrk2-latency-test-tezedge-new-vs-ocaml-vs-tezedge-old
  image: akoptelov/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: perf
      path: /perf
  commands:
    - tezos-node-bootstrap latency-test --tezedge-old-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK2_TEST_DURATION}  --wrk-request-rate=$${WRK2_REQ_RATE} --url-file=/perf/wrk-rpc-list.txt
  when:
    ref:
    - refs/pull/*/head

node:
  tag: real-time-linux-runner

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests
  - name: ocaml-node-florencenet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-1
  - name: ocaml-node-florencenet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-2
  - name: ocaml-node-florencenet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-florencenet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: perf
    host:
      path: /usr/local/etc/tezedge-ci/perf

trigger:
  branch:
    - master
    - develop

depends_on:
  - verify-real-time-environment
