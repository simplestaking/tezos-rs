##############################################################################################################
# Ocaml stuff is based on image tezos/tezos:v8 (if released new one, fell free to upgrade it here)
##############################################################################################################

##############################################################################################################
# Snapshoted data are prepared (on other server than drone, you need to have there actual tezos-node binary):
#
# - create/get snapshot:
#   1. download it from xtz-shots.io, e.g.: `wget https://delphinet.xtz-shots.io/tezos-delphinet-173873.full`
#   2. or run node and create snapshot manually to desired level (recomended, you can set set level high):
#     ./tezos-node config init --network edonet --data-dir /tmp/chain-data
#     ./tezos-node run --network edonet --data-dir /tmp/chain-data --net-addr 0.0.0.0:9734 --rpc-addr 0.0.0.0:18888 --history-mode archive
#     ./tezos-node snapshot export --block BM3qBTWs515g6Vforkns8o3AC4H57f3WdrKQSARwe4jbJoe2kEn edo.20000.full --data-dir /tmp/chain-data/
#
# - import snapshot:
#   ./tezos-node config init --network edonet --data-dir /tmp/edonet
#   ./tezos-node snapshot import edo.20000.full --data-dir /tmp/edonet  --reconstruct --network edonet --history-mode full
#   cd /tmp/edonet
#   tar -czvf edonet.20000.snapshoted.tar.gz context store config.json version.json
#   # copy to drone server
#   scp edonet.20000.snapshoted.tar.gz root@95.217.110.217:/usr/local/etc/tezedge-ci/snapshots
#
# - Drone server - extract and prepare dirs:
#   cd /usr/local/etc/tezedge-ci/snapshots
#   mkdir /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1 /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-2 /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-3
#   tar -xzvf edonet.20000.snapshoted.tar.gz -C /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/
#   # check directory `/usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/`, should looks like this:
#     /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/config.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/version.json
#     /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/context
#     /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/store
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-2
#   cp -R /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-1/* /usr/local/etc/tezedge-ci/data/ocaml-node-edonet-snapshot-data-3
##############################################################################################################

kind: pipeline
name: prepare-and-cleanup

clone:
  disable: true

workspace:
  path: /drone/src

steps:

- name: cleanup-data
  image: simplestakingcom/tezedge-ci-builder:latest
  user: root
  commands:
    - printenv

image_pull_secrets:
  - docker_pull_secret

trigger:
  branch:
    - master
    - develop

---
##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build

workspace:
  path: /drone/src

environment:
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  SANDBOX_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}/sandbox_files

steps:

- name: build-artifacts
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: always
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: tests
      path: /tests
    - name: ids
      path: /home/appuser/.ssh
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LOG_LEVEL: info
    OCAML_LOG_ENABLED: false
  commands:
    # prepare rust toolchain dir
    - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
    # build and unit-test
    - cargo clean
    - cargo build --release --workspace
    - cargo test --release --workspace --no-run
    # collect binary artefacts
    - mkdir $${BUILD_ARTIFACTS_PATH}
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files/tezedge
    - mkdir $${BUILD_ARTIFACTS_PATH}/build_files/identities
    - mkdir -p $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - mkdir $${TEST_ARTIFACTS_PATH}/tests
    - mkdir -p $${SANDBOX_ARTIFACTS_PATH}
    # copy binaries
    - cp ./target/release/light-node $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/sandbox $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/protocol-runner $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./target/release/context-actions-replayer $${BUILD_ARTIFACTS_PATH}/build_files
    - cp ./tezos/sys/lib_tezos/artifacts/libtezos.so $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - cp ./sandbox/artifacts/tezos-client $${BUILD_ARTIFACTS_PATH}/build_files
    # copy sapling init files
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-spend.params $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    - cp ./tezos/sys/lib_tezos/artifacts/sapling-output.params $${BUILD_ARTIFACTS_PATH}/build_files/ffi
    # copy sandbox resources
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/008-edo-protocol-parameters.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_start_light_node_args.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_init_client_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_activate_protocol_request.json $${SANDBOX_ARTIFACTS_PATH}
    - cp ./light_node/etc/tezedge_sandbox/sandbox_bake_empty_block.json $${SANDBOX_ARTIFACTS_PATH}
    # copy other resources
    - cp ./light_node/etc/drone/assert_equals.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_equals.sh
    - cp ./light_node/etc/drone/assert_contains.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/assert_contains.sh
    - cp ./light_node/etc/drone/wait_file.sh $${BUILD_ARTIFACTS_PATH}/build_files/ && chmod 755 $${BUILD_ARTIFACTS_PATH}/build_files/wait_file.sh
    - cp ./light_node/etc/drone/identities/* $${BUILD_ARTIFACTS_PATH}/build_files/identities/
    - cp ./light_node/etc/tezedge/tezedge_drone.config $${BUILD_ARTIFACTS_PATH}/build_files/tezedge/
    # copy test binaries
    - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test
    - cp `find ./target/release/deps/ | grep chain_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/shell_chain_test
    - cp `find ./target/release/deps/ | grep protocol_runner_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/protocol_runner_test
    - cp `find ./target/release/deps/ | grep p2p_test | grep -v "\.d" | head -1` $${TEST_ARTIFACTS_PATH}/tests/p2p_test
    # copy test resources
    - cp ./shell/tests/resources/apply_block_request_until_1326.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_1_level3.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox_branch_2_level4.zip $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    - cp ./shell/tests/resources/sandbox-patch-context.json $${TEST_ARTIFACTS_PATH}/test_data/tests/resources
    # collect modified python tests stuff
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/daemons
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/launchers
    - mkdir -p $${BUILD_ARTIFACTS_PATH}/python-tests/tools
    - cp -r ./tezos/python-tests/daemons/node.py $${BUILD_ARTIFACTS_PATH}/python-tests/daemons/node.py
    - cp -r ./tezos/python-tests/launchers/sandbox.py $${BUILD_ARTIFACTS_PATH}/python-tests/launchers/sandbox.py
    - cp -r ./tezos/python-tests/tools/constants.py $${BUILD_ARTIFACTS_PATH}/python-tests/tools/constants.py
    # Modify permissions for ssh key
    - chown appuser /home/appuser/.ssh/id_rsa
    - chown appuser /home/appuser/.ssh
    - chmod 600 /home/appuser/.ssh/id_rsa
    - ls -la /home/appuser/.ssh
    # copy build files to all other runner machines
    - echo "runner = $${DRONE_RUNNER_IP_ADDRESS}"
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${BUILD_ARTIFACTS_PATH} /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER} /home/appuser/.ssh
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${BUILD_ARTIFACTS_PATH}/build_files /usr/local/etc/tezedge-ci/build/build_${DRONE_BUILD_NUMBER}/build_files /home/appuser/.ssh
    - chmod 755 ./synchronize_ci.sh && ./synchronize_ci.sh $${TEST_ARTIFACTS_PATH} /usr/local/etc/tezedge-ci/tests/build_${DRONE_BUILD_NUMBER} /home/appuser/.ssh

image_pull_secrets:
  - docker_pull_secret

depends_on:
  - prepare-and-cleanup

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build/
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests/
  - name: ids
    host:
      path: /usr/local/etc/tezedge-ci/id

trigger:
  branch:
    - master
    - develop

---
kind: pipeline
name: delphinet-big-offline-tests
# default build goes with: --network "delphinet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task bootstrap)
# - WRK_TEST_BLOCK_HEADER - block level for wrk performance test - it checks severel rpc on this block
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCAML_NODE_RPC_CONTEXT_ROOT_1: running ocaml node, e.g.: http://ocaml-node-run-1:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_2: running ocaml node, e.g.: http://ocaml-node-run-2:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_3: running ocaml node, e.g.: http://ocaml-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-updated-node-run:18732

clone:
  disable: true

environment:
  NETWORK: delphinet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 520 # also check parameter --stop=
  WRK_TEST_BLOCK_HEADER: 520
  WRK_TEST_DURATION: 10  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  MAX_LATENCY_THRESHOLD: 100 # in %
  THROUGHPUTL_THRESHOLD: 10 # in %
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-run-3:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-run-1:9734,ocaml-node-run-2:9734,ocaml-node-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-updated-node-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-old-node-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-ocaml:8002
  BUILD_ARTIFACTS_PATH: /artifacts/build_${DRONE_BUILD_NUMBER}
  TEST_ARTIFACTS_PATH: /tests/build_${DRONE_BUILD_NUMBER}
  CACHE_DATA_PATH: /data/cache/build_${DRONE_BUILD_NUMBER}/delphinet-big-offline-tests

steps:
- name: prepare-data
  image: alpine/git
  user: root
  volumes:
    - name: cache
      path: /data/cache
  commands:
    - rm -rf $${CACHE_DATA_PATH}
    - mkdir -p $${CACHE_DATA_PATH}

# just run ocaml 3 delphinet snapshoted nodes
- name: ocaml-node-run-1
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-1
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-run-2
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-2
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-run-3
  user: root
  image: tezos/tezos:v8.2
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-delphinet-snapshot-data-3
      path: /home/tezos/data
    - name: cache
      path: /data/cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > $${CACHE_DATA_PATH}/ocaml_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-ocaml-snapshoted-nodes
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${OCAML_NODE_RPC_CONTEXT_ROOT_1}

# if we are doing pull request, run also "old node" build (async) for wrk total compare at the end
- name: tezedge-old-node-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - mkdir -p /tmp/tezedge-target-branch
    - cd /tmp/tezedge-target-branch
    - rm -rf tezedge
    - target_branch=$${DRONE_TARGET_BRANCH}
    - echo "...checkouting target branch - $target_branch"
    - git clone https://github.com/tezedge/tezedge.git && cd tezedge && git checkout $target_branch
    - cd /tmp/tezedge-target-branch/tezedge
    - export LD_LIBRARY_PATH=./tezos/sys/lib_tezos/artifacts:./tezos/interop/lib_tezos/artifacts:./target/release
    - cargo build --release --package light-node --package protocol-runner
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --protocol-runner ./target/release/protocol-runner --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --network "$${NETWORK}" --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_5.json" --init-sapling-spend-params-file ./tezos/sys/lib_tezos/artifacts/sapling-spend.params --init-sapling-output-params-file ./tezos/sys/lib_tezos/artifacts/sapling-output.params
  when:
    ref:
      - refs/pull/*/head

# this is triggerd just on pull request to target branch
- name: bootstrapping-tezedge-target-branch
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap bootstrap --level=$${WRK_TEST_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

- name: tezedge-updated-node-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: cache
      path: /data/cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - cp $${BUILD_ARTIFACTS_PATH}/build_files/protocol-runner $${CACHE_DATA_PATH}
    - PEERS=$(cat $${CACHE_DATA_PATH}/ocaml_ip1.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip2.txt | awk '{print $1 ","}')$(cat $${CACHE_DATA_PATH}/ocaml_ip3.txt)
    - echo "peers - $PEERS"
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="$${BUILD_ARTIFACTS_PATH}/build_files/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - $${BUILD_ARTIFACTS_PATH}/build_files/light-node --config-file "$${BUILD_ARTIFACTS_PATH}/build_files/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "$${BUILD_ARTIFACTS_PATH}/build_files/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "$${CACHE_DATA_PATH}/protocol-runner" --p2p-port 19732 --tezos-data-dir ./tezos-node-data --bootstrap-db-path ./light-node-data --init-sapling-spend-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-spend.params --init-sapling-output-params-file $${BUILD_ARTIFACTS_PATH}/build_files/ffi/sapling-output.params

- name: bootstrapping-tezedge
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap bootstrap --level=$${TO_BLOCK_HEADER} --nodes $${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

# run both indexers on background to fill data
- name: tz-indexer-tezedge
  image: blockwatch/tzindex:latest
  pull: always
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-updated-node-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521"]

- name: tz-indexer-ocaml
  image: blockwatch/tzindex:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: indexer-ocaml-data
      path: /data
  environment:
    TZ_RPC_HOST: ocaml-node-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=521"]

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: tests
      path: /tests
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - export IGNORE_PATH_PATTERNS=/operations_metadata_hash,/metadata_hash,/operation_metadata_hashes
    - $${TEST_ARTIFACTS_PATH}/tests/rpc_integration_test --nocapture --ignored test_rpc_compare

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  commands:
    - tezos-node-bootstrap indexer-test --level=$${TO_BLOCK_HEADER} --tezedge-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --tezedge-indexer=$${TEZEDGE_NODE_INDEXER_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --ocaml-indexer=$${OCAML_NODE_INDEXER_ROOT}

# compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with two nodes (current branch and ocaml))
# not triggered on pull request, because on pull request is triggered more complex wrk test
# - name: wrk-performance-test-tezedge-new-vs-ocaml
#   image: simplestakingcom/tezos-node-bootstrap:latest
#   pull: if-not-exists
#   user: root
#   commands:
#     - tezos-node-bootstrap performance-test --level=$${WRK_TEST_BLOCK_HEADER} --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10
#   when:
#     ref:
#       exclude:
#       - refs/pull/*/head

#  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (target_branch, current branch and ocaml))
- name: wrk-performance-test-tezedge-old-vs-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  commands:
    - tezos-node-bootstrap performance-test --level=$${WRK_TEST_BLOCK_HEADER}  --tezedge-new-node=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10
  when:
    ref:
    - refs/pull/*/head

- name: wrk-performance-test-tezedge-new-vs-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: if-not-exists
  user: root
  commands:
    - tezos-node-bootstrap performance-test --level=$${WRK_TEST_BLOCK_HEADER}  --tezedge-new-node=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --ocaml-node=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-test-duration=$${WRK_TEST_DURATION} --max-latency-threshold=100 --throughput-threshold=10
  when:
    ref:
    - refs/pull/*/head

image_pull_secrets:
  - docker_pull_secret

volumes:
  - name: build
    host:
      path: /usr/local/etc/tezedge-ci/build
  - name: tests
    host:
      path: /usr/local/etc/tezedge-ci/tests
  - name: ocaml-node-delphinet-snapshot-data-1
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-1
  - name: ocaml-node-delphinet-snapshot-data-2
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-2
  - name: ocaml-node-delphinet-snapshot-data-3
    host:
      path: /usr/local/etc/tezedge-ci/data/ocaml-node-delphinet-snapshot-data-3
  - name: cache
    host:
      path: /usr/local/etc/tezedge-ci/data/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - master
    - develop

depends_on:
  - build
