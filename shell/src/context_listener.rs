// Copyright (c) SimpleStaking and Tezedge Contributors
// SPDX-License-Identifier: MIT

//! Listens for events from the `protocol_runner`.

use failure::Error;
use riker::actors::*;
use slog::{crit, info, warn, Logger};
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::{Arc, Mutex};
use std::thread;
use std::thread::JoinHandle;
use std::time::Duration;

use storage::context::{ActionRecorder, ContextApi, TezedgeContext};
use storage::BlockStorage;
use storage::PersistentStorage;
use tezos_context::channel::ContextAction;
use tezos_wrapper::service::IpcEvtServer;

use crate::shell_channel::{ShellChannelMsg, ShellChannelRef};
use crate::subscription::subscribe_to_shell_shutdown;

type SharedJoinHandle = Arc<Mutex<Option<JoinHandle<Result<(), Error>>>>>;

/// This actor listens for events generated by the `protocol_runner`.
#[actor(ShellChannelMsg)]
pub struct ContextListener {
    /// Just for subscribing to shell shutdown channel
    shell_channel: ShellChannelRef,

    /// Thread where blocks are applied will run until this is set to `false`
    listener_run: Arc<AtomicBool>,
    /// Context event listener thread
    listener_thread: SharedJoinHandle,
}

/// Reference to [context listener](ContextListener) actor.
pub type ContextListenerRef = ActorRef<ContextListenerMsg>;

impl ContextListener {
    // TODO: if needed, can go to cfg
    const IPC_ACCEPT_TIMEOUT: Duration = Duration::from_secs(3);

    /// Create new actor instance.
    ///
    /// This actor spawns a new thread in which it listens for incoming events from the `protocol_runner`.
    /// Events are received from IPC channel provided by [`event_server`](IpcEvtServer).
    pub fn actor(
        sys: &impl ActorRefFactory,
        shell_channel: ShellChannelRef,
        persistent_storage: &PersistentStorage,
        action_store_backend: Vec<Box<dyn ActionRecorder + Send>>,
        mut event_server: IpcEvtServer,
        log: Logger,
    ) -> Result<ContextListenerRef, CreateError> {
        let listener_run = Arc::new(AtomicBool::new(true));
        let block_applier_thread = {
            let listener_run = listener_run.clone();
            let persistent_storage = persistent_storage.clone();

            thread::spawn(move || -> Result<(), Error> {
                let mut context: Box<dyn ContextApi> = Box::new(TezedgeContext::new(
                    Some(BlockStorage::new(&persistent_storage)),
                    persistent_storage.merkle(),
                ));

                let mut action_store_backend = action_store_backend;

                while listener_run.load(Ordering::Acquire) {
                    match listen_protocol_events(
                        &listener_run,
                        &mut event_server,
                        Self::IPC_ACCEPT_TIMEOUT,
                        &mut action_store_backend,
                        &mut context,
                        &log,
                    ) {
                        Ok(()) => info!(log, "Context listener finished"),
                        Err(err) => {
                            if listener_run.load(Ordering::Acquire) {
                                crit!(log, "Error process context event"; "reason" => format!("{:?}", err))
                            }
                        }
                    }
                }

                info!(log, "Context listener thread finished");
                Ok(())
            })
        };

        let myself = sys.actor_of_props::<ContextListener>(
            ContextListener::name(),
            Props::new_args((
                shell_channel,
                listener_run,
                Arc::new(Mutex::new(Some(block_applier_thread))),
            )),
        )?;

        Ok(myself)
    }

    /// The `ContextListener` is intended to serve as a singleton actor so that's why
    /// we won't support multiple names per instance.
    fn name() -> &'static str {
        "context-listener"
    }
}

impl ActorFactoryArgs<(ShellChannelRef, Arc<AtomicBool>, SharedJoinHandle)> for ContextListener {
    fn create_args(
        (shell_channel, listener_run, listener_thread): (
            ShellChannelRef,
            Arc<AtomicBool>,
            SharedJoinHandle,
        ),
    ) -> Self {
        ContextListener {
            shell_channel,
            listener_run,
            listener_thread,
        }
    }
}

impl Actor for ContextListener {
    type Msg = ContextListenerMsg;

    fn pre_start(&mut self, ctx: &Context<Self::Msg>) {
        subscribe_to_shell_shutdown(&self.shell_channel, ctx.myself());
    }

    fn post_stop(&mut self) {
        self.listener_run.store(false, Ordering::Release);

        let _ = self
            .listener_thread
            .lock()
            .unwrap()
            .take()
            .expect("Thread join handle is missing")
            .join()
            .expect("Failed to join context listener thread");
    }

    fn recv(&mut self, ctx: &Context<Self::Msg>, msg: Self::Msg, sender: Sender) {
        self.receive(ctx, msg, sender);
    }
}

impl Receive<ShellChannelMsg> for ContextListener {
    type Msg = ContextListenerMsg;

    fn receive(&mut self, _: &Context<Self::Msg>, msg: ShellChannelMsg, _sender: Sender) {
        if let ShellChannelMsg::ShuttingDown(_) = msg {
            self.listener_run.store(false, Ordering::Release);
        }
    }
}

fn listen_protocol_events(
    apply_block_run: &AtomicBool,
    event_server: &mut IpcEvtServer,
    event_server_accept_timeout: Duration,
    action_store_backend: &mut Vec<Box<dyn ActionRecorder + Send>>,
    context: &mut Box<dyn ContextApi>,
    log: &Logger,
) -> Result<(), Error> {
    info!(
        log,
        "Context listener is waiting for connection from protocol runner"
    );
    let mut rx = event_server.try_accept(event_server_accept_timeout)?;
    info!(
        log,
        "Context listener received connection from protocol runner. Starting to process context events."
    );

    while apply_block_run.load(Ordering::Acquire) {
        match rx.receive() {
            Ok(ContextAction::Shutdown) => {
                // when we receive shutting down, it means just that protocol runner disconnected
                // we dont want to stop context listener here, for example, because we are just restarting protocol runner
                // and we want to wait for a new one to try_accept
                // if we want to shutdown context listener, there is ShellChannelMsg for that
                break;
            }
            Ok(action) => {
                // record actions
                for recorder in action_store_backend.iter_mut() {
                    if let Err(error) = recorder.record(&action) {
                        warn!(log, "Failed to store context action"; "action" => format!("{:?}", &action), "reason" => format!("{}", error));
                    }
                }

                // evaluate context
                context.perform_context_action(&action)?;
            }
            Err(err) => {
                warn!(log, "Failed to receive event from protocol runner"; "reason" => format!("{:?}", err));
                break;
            }
        }
    }

    Ok(())
}
